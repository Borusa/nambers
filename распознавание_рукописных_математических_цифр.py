# -*- coding: utf-8 -*-
"""Распознавание рукописных математических цифр.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1twFbcYQ-8LC51QfIt2m7fzDJhm5A4H1y
"""

from tensorflow.keras.datasets import mnist 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
from tensorflow.keras.optimizers import Adam 
from tensorflow.keras import utils 
from tensorflow.keras.preprocessing import image 
import numpy as np 
import pylab 
from mpl_toolkits.mplot3d import Axes3D 
from google.colab import files 
import matplotlib.pyplot as plt 
from PIL import Image 
from tensorflow.keras.preprocessing.image import load_img 
(x_train_org, y_train_org), (x_test_org, y_test_org) = mnist.load_data()
x_train_org[0]

n = 700
plt.imshow(Image.fromarray(x_train_org[n]).convert('RGBA'))
plt.show()

x_train = x_train_org.reshape(60000, 784)
x_test = x_test_org.reshape(10000, 784)
print(x_train_org.shape)
print(x_train.shape)

x_train = x_train.astype('float32')
x_train = x_train / 255 
x_test = x_test.astype('float32') 
x_test = x_test / 255
y_train = utils.to_categorical(y_train_org, 10)
y_test = utils.to_categorical(y_test_org, 10)
print(y_train.shape)
print(y_train[n])
print(y_train_org.shape)
print(y_train_org[36])

model = Sequential()
model.add(Dense(800, input_dim=784, activation="relu"))
model.add(Dense(400, activation="relu")) 
model.add(Dense(10, activation="softmax"))
model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
print(model.summary())

model.fit(x_train, y_train, batch_size=128, epochs=15, verbose=1)

model.save_weights('model.h5')
model.load_weights('model.h5')

from google.colab import drive
drive.mount('/content/drive')
!unzip '/content/drive/My Drive/Базы/a'

import os
fig, axs = plt.subplots(1, 10, figsize=(25, 5)) 
for i in range(10): 
  img = load_img('a/'+str(i) + '.JPG' or 'jpg', target_size=(28, 28)) 
  axs[i].imshow(img, cmap = 'gray')
plt.show()

fig, axs = plt.subplots(1, 10, figsize=(25, 5))
for i in range(10): 
  img = load_img('a/' + str(i) + '.JPG' or 'jpg', target_size=(28, 28), color_mode = 'grayscale') 
  img = np.array(1 - np.array(img) / 255)
  img[img < 0.5] = 0
  img[img >= 0.5] = 1
  axs[i].imshow(img, cmap = 'gray')
  
  result = 'НЕВЕРНО' if (i != np.argmax(model.predict(img.reshape(1, 784)))) else 'ВЕРНО'
  print('Число:', i, '. Cеть распознала:', np.argmax(model.predict(img.reshape(1, 784))), result)

plt.show()